#!/usr/bin/env python3
"""
üîç DIAGN√ìSTICO COMPLETO DEL SERVIDOR BARBARA
Este script identifica exactamente qu√© est√° causando que el servidor no se inicie
"""

import os
import sys
import subprocess
import time
import requests
from pathlib import Path

def check_python_version():
    """Verifica la versi√≥n de Python"""
    print("üêç Verificando versi√≥n de Python...")
    version = sys.version_info
    print(f"   Python {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Se requiere Python 3.8 o superior")
        return False
    else:
        print("‚úÖ Versi√≥n de Python compatible")
        return True

def check_environment_file():
    """Verifica el archivo de variables de entorno"""
    print("\nüîß Verificando archivo .environment...")
    
    env_file = Path(".environment")
    if not env_file.exists():
        print("‚ùå Archivo .environment no encontrado")
        return False
    
    try:
        with open(env_file, 'r') as f:
            content = f.read()
        
        if "GEMINI_API_KEY=" in content:
            print("‚úÖ GEMINI_API_KEY encontrada")
            return True
        else:
            print("‚ùå GEMINI_API_KEY no encontrada en .environment")
            return False
    except Exception as e:
        print(f"‚ùå Error leyendo .environment: {e}")
        return False

def check_dependencies():
    """Verifica las dependencias principales"""
    print("\nüì¶ Verificando dependencias...")
    
    dependencies = [
        'flask',
        'flask_cors', 
        'requests',
        'python-dotenv',
        'twilio'
    ]
    
    missing = []
    for dep in dependencies:
        try:
            __import__(dep.replace('-', '_'))
            print(f"   ‚úÖ {dep}")
        except ImportError:
            print(f"   ‚ùå {dep} - FALTANTE")
            missing.append(dep)
    
    if missing:
        print(f"\n‚ö†Ô∏è Dependencias faltantes: {', '.join(missing)}")
        print("   Ejecuta: pip install " + " ".join(missing))
        return False
    
    return True

def check_optional_dependencies():
    """Verifica dependencias opcionales que pueden causar problemas"""
    print("\nüîç Verificando dependencias opcionales...")
    
    optional_deps = [
        'spacy',
        'psycopg2',
        'openai'
    ]
    
    for dep in optional_deps:
        try:
            __import__(dep.replace('-', '_'))
            print(f"   ‚úÖ {dep} - Instalada")
        except ImportError:
            print(f"   ‚ö†Ô∏è {dep} - No instalada (opcional)")

def test_server_startup():
    """Intenta iniciar el servidor y captura errores espec√≠ficos"""
    print("\nüöÄ Probando inicio del servidor...")
    
    try:
        # Intentar importar el m√≥dulo principal
        print("   Importando app_ddd...")
        import app_ddd
        print("   ‚úÖ app_ddd importado correctamente")
        
        # Verificar que la aplicaci√≥n Flask se cre√≥
        if hasattr(app_ddd, 'app'):
            print("   ‚úÖ Aplicaci√≥n Flask creada")
        else:
            print("   ‚ùå Aplicaci√≥n Flask no encontrada")
            return False
        
        # Verificar que Barbara se inicializ√≥
        if hasattr(app_ddd, 'barbara'):
            print("   ‚úÖ Barbara inicializada")
        else:
            print("   ‚ùå Barbara no inicializada")
            return False
        
        return True
        
    except ImportError as e:
        print(f"   ‚ùå Error de importaci√≥n: {e}")
        return False
    except Exception as e:
        print(f"   ‚ùå Error durante inicializaci√≥n: {e}")
        return False

def test_server_health():
    """Prueba si el servidor responde en el puerto 5000"""
    print("\nüè• Probando health check...")
    
    try:
        response = requests.get("http://localhost:5000/health", timeout=5)
        if response.status_code == 200:
            print("   ‚úÖ Servidor respondiendo correctamente")
            return True
        else:
            print(f"   ‚ùå Servidor respondi√≥ con c√≥digo: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("   ‚ùå No se puede conectar al servidor (puerto 5000)")
        return False
    except Exception as e:
        print(f"   ‚ùå Error en health check: {e}")
        return False

def main():
    """Funci√≥n principal de diagn√≥stico"""
    print("üîç DIAGN√ìSTICO COMPLETO DEL SERVIDOR BARBARA")
    print("=" * 50)
    
    # Verificaciones b√°sicas
    if not check_python_version():
        return
    
    if not check_environment_file():
        return
    
    if not check_dependencies():
        return
    
    check_optional_dependencies()
    
    # Verificar inicio del servidor
    if not test_server_startup():
        print("\n‚ùå El servidor no puede iniciarse debido a errores de importaci√≥n/inicializaci√≥n")
        print("   Revisa los errores anteriores y aseg√∫rate de que todas las dependencias est√©n instaladas")
        return
    
    # Verificar si el servidor est√° ejecut√°ndose
    if not test_server_health():
        print("\n‚ö†Ô∏è El servidor no est√° ejecut√°ndose en el puerto 5000")
        print("   Ejecuta: python app_ddd.py")
        return
    
    print("\n‚úÖ DIAGN√ìSTICO COMPLETADO - TODO FUNCIONANDO")
    print("   El servidor est√° listo para usar")

if __name__ == "__main__":
    main() 
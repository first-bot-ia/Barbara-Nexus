"""
üìß Mailtrap Service - Servicio de env√≠o GRATUITO para Python
1,000 emails/mes gratis - Perfecto para Barbara
"""

import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import logging
from typing import Dict, Any, Optional
from datetime import datetime
import os

logger = logging.getLogger(__name__)

class MailtrapService:
    """
    Servicio de env√≠o usando Mailtrap (1,000 emails/mes GRATIS)
    Perfecto para aplicaciones Python como Barbara
    """
    
    def __init__(self):
        # Configuraci√≥n Mailtrap GRATUITA
        self.smtp_server = "sandbox.smtp.mailtrap.io"
        self.smtp_port = 2525
        
        # Credenciales Mailtrap (config√∫ralas en .env)
        self.username = os.getenv("MAILTRAP_USERNAME", "tu_mailtrap_username")
        self.password = os.getenv("MAILTRAP_PASSWORD", "tu_mailtrap_password")
        
        self.sender_name = "Barbara - Autofondo Alese"
        self.sender_email = "barbara@autofondoalese.com"
        
    def send_quotation_email(self, 
                           recipient_email: str,
                           client_name: str,
                           cotizacion: Dict[str, Any]) -> bool:
        """
        Env√≠a cotizaci√≥n por correo usando Mailtrap
        
        Args:
            recipient_email: Email del destinatario
            client_name: Nombre del cliente
            cotizacion: Datos de la cotizaci√≥n (DEBE tener todos los valores requeridos)
            
        Returns:
            bool: True si se envi√≥ exitosamente
        """
        
        try:
            # Validar datos de entrada
            if not self._validate_cotizacion_data(cotizacion):
                logger.error("‚ùå Cotizaci√≥n inv√°lida - faltan datos requeridos")
                return False
            
            # Crear mensaje
            message = MIMEMultipart("alternative")
            message["Subject"] = f"Tu Cotizaci√≥n SOAT - {cotizacion['numero_cotizacion']}"
            message["From"] = f"{self.sender_name} <{self.sender_email}>"
            message["To"] = recipient_email
            
            # Generar contenido
            text_content = self._generate_text_content(client_name, cotizacion)
            html_content = self._generate_html_content(client_name, cotizacion)
            
            # Crear partes del mensaje
            text_part = MIMEText(text_content, "plain", "utf-8")
            html_part = MIMEText(html_content, "html", "utf-8")
            
            # Adjuntar partes
            message.attach(text_part)
            message.attach(html_part)
            
            # Enviar email con Mailtrap
            context = ssl.create_default_context()
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls(context=context)
                server.login(self.username, self.password)
                server.sendmail(self.sender_email, recipient_email, message.as_string())
            
            logger.info(f"üìß Cotizaci√≥n enviada por Mailtrap a {recipient_email}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error enviando email con Mailtrap: {e}")
            return False
    
    def _generate_text_content(self, client_name: str, cotizacion: Dict[str, Any]) -> str:
        """Genera contenido de texto plano con datos reales"""
        
        return f"""üõ°Ô∏è TU COTIZACI√ìN SOAT - AUTOFONDO ALESE

¬°Hola {client_name}!

Te enviamos tu cotizaci√≥n personalizada generada por Barbara:

üìã DETALLES DE TU COTIZACI√ìN
================================
Cliente: {client_name}
Veh√≠culo: {cotizacion['tipo_vehiculo']}
Cotizaci√≥n N¬∞: {cotizacion['numero_cotizacion']}
Fecha: {datetime.now().strftime('%d/%m/%Y')}

üí∞ PRECIO FINAL: {cotizacion['precio_final']}

‚úÖ TU SOAT INCLUYE:
- Gastos m√©dicos: Hasta 5 UIT (S/ 25,500)
- Muerte: Hasta 4 UIT (S/ 20,400)  
- Invalidez permanente: Hasta 4 UIT (S/ 20,400)
- Gastos de sepelio: Hasta 1 UIT (S/ 5,100)
- Cobertura las 24 horas todos los d√≠as del a√±o
- Atenci√≥n m√©dica inmediata en caso de accidente

‚è∞ OFERTA V√ÅLIDA POR 15 D√çAS

Para finalizar tu compra, contacta:
üìû +51 999 888 777
üìß info@autofondoalese.com

---
Barbara & Equipo Autofondo Alese
Tu compa√±√≠a de seguros de confianza"""
    
    def _generate_html_content(self, client_name: str, cotizacion: Dict[str, Any]) -> str:
        """Genera contenido HTML profesional con datos reales"""
        
        return f"""
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tu Cotizaci√≥n SOAT</title>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }}
        .header {{ background: #1e3a8a; color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }}
        .content {{ background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }}
        .cotizacion-box {{ background: white; padding: 25px; border-radius: 8px; margin: 20px 0; }}
        .precio {{ font-size: 24px; font-weight: bold; color: #1e3a8a; text-align: center; background: #e8f4f8; padding: 20px; border-radius: 8px; }}
        .cta {{ background: #1e3a8a; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>üõ°Ô∏è Tu Cotizaci√≥n SOAT</h1>
        <p>Autofondo Alese - Protecci√≥n completa</p>
    </div>
    
    <div class="content">
        <h2>¬°Hola {client_name}!</h2>
        
        <p>Barbara ha preparado tu cotizaci√≥n personalizada:</p>
        
        <div class="cotizacion-box">
            <h3>üìã Detalles de tu Cotizaci√≥n</h3>
            <p><strong>Cliente:</strong> {client_name}</p>
            <p><strong>Veh√≠culo:</strong> {cotizacion['tipo_vehiculo']}</p>
            <p><strong>Cotizaci√≥n N¬∞:</strong> {cotizacion['numero_cotizacion']}</p>
            <p><strong>Fecha:</strong> {datetime.now().strftime('%d/%m/%Y')}</p>
        </div>
        
        <div class="precio">
            üí∞ Precio Final: {cotizacion['precio_final']}
        </div>
        
        <h3>‚úÖ Tu SOAT Incluye:</h3>
        <ul>
            <li>Gastos m√©dicos: Hasta 5 UIT (S/ 25,500)</li>
            <li>Muerte: Hasta 4 UIT (S/ 20,400)</li>
            <li>Invalidez permanente: Hasta 4 UIT (S/ 20,400)</li>
            <li>Gastos de sepelio: Hasta 1 UIT (S/ 5,100)</li>
        </ul>
        
        <p style="text-align: center;">
            <a href="tel:+51999888777" class="cta">üìû Finalizar Compra: +51 999 888 777</a>
        </p>
        
        <p><strong>‚è∞ Oferta v√°lida por 15 d√≠as</strong></p>
    </div>
    
    <div style="text-align: center; margin-top: 20px; color: #666;">
        <p>Barbara & Equipo Autofondo Alese<br>
        üìß info@autofondoalese.com | üìû +51 999 888 777</p>
    </div>
</body>
</html>
        """
    
    def _validate_cotizacion_data(self, cotizacion: Dict[str, Any]) -> bool:
        """
        Valida que la cotizaci√≥n tenga todos los datos necesarios
        NO PERMITE valores None o vac√≠os
        """
        required_fields = ['numero_cotizacion', 'tipo_vehiculo', 'precio_final']
        
        for field in required_fields:
            if field not in cotizacion or not cotizacion[field]:
                logger.error(f"‚ùå Campo requerido faltante o vac√≠o en Mailtrap: {field}")
                return False
        
        return True
    
    def get_service_status(self) -> Dict[str, Any]:
        """Obtiene el estado del servicio Mailtrap"""
        return {
            'service': 'Mailtrap Service',
            'status': 'active',
            'provider': 'Mailtrap',
            'smtp_server': self.smtp_server,
            'smtp_port': self.smtp_port,
            'username_configured': bool(self.username and self.username != 'tu_mailtrap_username'),
            'cost': 'FREE',
            'monthly_limit': '1,000 emails/mes GRATIS',
            'perfect_for': 'Python applications like Barbara'
        } 
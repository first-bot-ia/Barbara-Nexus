"""
üì± WhatsApp PDF Service - Env√≠o de PDFs por WhatsApp
==================================================
Servicio para enviar cotizaciones PDF por WhatsApp usando Twilio
"""

from twilio.rest import Client
import os
import logging
from typing import Dict, Any, Optional
from urllib.parse import urljoin
import requests

logger = logging.getLogger(__name__)

class WhatsAppPDFService:
    """
    Servicio para enviar PDFs por WhatsApp usando Twilio
    """
    
    def __init__(self):
        # Configuraci√≥n de Twilio desde variables de entorno
        self.account_sid = os.getenv('TWILIO_ACCOUNT_SID')
        self.auth_token = os.getenv('TWILIO_AUTH_TOKEN') 
        self.whatsapp_number = os.getenv('TWILIO_WHATSAPP_NUMBER', 'whatsapp:+14155238886')
        
        # Inicializar client como None por defecto para evitar AttributeError
        self.client = None
        
        if not all([self.account_sid, self.auth_token]):
            logger.warning("‚ö†Ô∏è Credenciales de Twilio no configuradas completamente")
        else:
            try:
                self.client = Client(self.account_sid, self.auth_token)
                logger.info("üì± WhatsApp PDF Service inicializado")
            except Exception as e:
                logger.error(f"‚ùå Error inicializando Twilio client: {e}")
                self.client = None
                
    
    def send_quotation_pdf(self, 
                          phone_number: str,
                          client_name: str,
                          cotizacion: Dict[str, Any],
                          pdf_url: Optional[str] = None) -> bool:
        """
        Env√≠a cotizaci√≥n PDF por WhatsApp
        
        Args:
            phone_number: N√∫mero de tel√©fono del cliente
            client_name: Nombre del cliente
            cotizacion: Datos de la cotizaci√≥n
            pdf_url: URL del PDF (si no se proporciona, se genera)
            
        Returns:
            bool: True si se envi√≥ exitosamente
        """
        
        try:
            if not self.client:
                logger.error("‚ùå Cliente Twilio no inicializado")
                return False
            
            # Generar PDF si no se proporciona URL
            if not pdf_url:
                try:
                    from infrastructure.external_apis.pdf_generator_service import PDFGeneratorService
                    pdf_service = PDFGeneratorService()
                    pdf_path = pdf_service.generate_quotation_pdf(client_name, cotizacion)
                    
                    # Convertir a URL accesible (esto requiere servidor web)
                    # Para desarrollo, asumimos que el PDF est√° en assets/
                    pdf_filename = os.path.basename(pdf_path)
                    # En producci√≥n, esto deber√≠a ser una URL real del servidor
                    pdf_url = f"http://127.0.0.1:5000/assets/{pdf_filename}"
                    
                except Exception as e:
                    logger.error(f"‚ùå Error generando PDF: {e}")
                    return False
            
            # Formatear n√∫mero de tel√©fono
            if not phone_number.startswith('whatsapp:'):
                if not phone_number.startswith('+'):
                    phone_number = f"+51{phone_number}"  # Asumir Per√∫ si no hay c√≥digo
                phone_number = f"whatsapp:{phone_number}"
            
            # Crear mensaje con PDF
            message_body = self._create_pdf_message(client_name, cotizacion)
            
            # Enviar mensaje con adjunto
            message = self.client.messages.create(
                body=message_body,
                from_=self.whatsapp_number,
                to=phone_number,
                media_url=[pdf_url]  # Adjuntar PDF
            )
            
            logger.info(f"üì± PDF enviado por WhatsApp a {phone_number} - SID: {message.sid}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error enviando PDF por WhatsApp: {e}")
            return False
    
    def send_simple_pdf_message(self, 
                               phone_number: str,
                               client_name: str,
                               cotizacion: Dict[str, Any]) -> bool:
        """
        Env√≠a mensaje simple con informaci√≥n de que el PDF va por email
        (Para cuando no se pueda adjuntar PDF directamente)
        """
        
        try:
            if not self.client:
                logger.error("‚ùå Cliente Twilio no inicializado")
                return False
            
            # Formatear n√∫mero
            if not phone_number.startswith('whatsapp:'):
                if not phone_number.startswith('+'):
                    phone_number = f"+51{phone_number}"
                phone_number = f"whatsapp:{phone_number}"
            
            # Validar cotizaci√≥n ANTES de usar
            if not self._validate_cotizacion(cotizacion):
                logger.error("‚ùå Cotizaci√≥n inv√°lida - faltan datos requeridos")
                return False
            
            # Mensaje informativo con datos reales - SIN valores est√°ticos
            message_body = f"""üìã ¬°Hola {client_name}!

Tu cotizaci√≥n SOAT est√° lista:

üöó Veh√≠culo: {cotizacion['tipo_vehiculo']}
üí∞ Precio: {cotizacion['precio_final']}
üìÑ Cotizaci√≥n N¬∞: {cotizacion['numero_cotizacion']}

üìß Te estoy enviando el PDF completo por correo electr√≥nico.

¬øTienes alguna pregunta sobre tu cotizaci√≥n?"""
            
            message = self.client.messages.create(
                body=message_body,
                from_=self.whatsapp_number,
                to=phone_number
            )
            
            logger.info(f"üì± Mensaje PDF info enviado por WhatsApp a {phone_number}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error enviando mensaje WhatsApp: {e}")
            return False
    
    def _create_pdf_message(self, client_name: str, cotizacion: Dict[str, Any]) -> str:
        """Crea mensaje para acompa√±ar el PDF"""
        
        # Validar cotizaci√≥n ANTES de usar
        if not self._validate_cotizacion(cotizacion):
            return f"‚ùå Error: Cotizaci√≥n incompleta para {client_name}"
        
        return f"""üìã ¬°Hola {client_name}!

Tu cotizaci√≥n SOAT completa est√° adjunta en PDF:

üöó Veh√≠culo: {cotizacion['tipo_vehiculo']}
üí∞ Precio Final: {cotizacion['precio_final']}
üìÑ Cotizaci√≥n N¬∞: {cotizacion['numero_cotizacion']}
‚è∞ V√°lida por 15 d√≠as

üìé PDF adjunto con todos los detalles

¬øListo para proteger tu veh√≠culo? ¬°Cont√°ctame para finalizar!"""
    
    def _validate_cotizacion(self, cotizacion: Dict[str, Any]) -> bool:
        """
        Valida que la cotizaci√≥n tenga todos los campos requeridos
        NO permite valores None o vac√≠os - TODO DEBE SER DIN√ÅMICO
        """
        required_fields = ['tipo_vehiculo', 'precio_final', 'numero_cotizacion']
        
        for field in required_fields:
            if field not in cotizacion or not cotizacion[field] or cotizacion[field] == '':
                logger.error(f"‚ùå Campo requerido faltante o vac√≠o: {field}")
                return False
        
        return True
    
    def get_service_status(self) -> Dict[str, Any]:
        """Obtiene estado del servicio WhatsApp"""
        return {
            'service': 'WhatsApp PDF Service',
            'status': 'active' if hasattr(self, 'client') and self.client else 'inactive',
            'provider': 'Twilio',
            'whatsapp_number': self.whatsapp_number,
            'features': [
                'Env√≠o de PDF por WhatsApp',
                'Mensajes informativos',
                'Integraci√≥n con Twilio',
                'Soporte multimedia'
            ],
            'configured': bool(self.account_sid and self.auth_token)
        } 
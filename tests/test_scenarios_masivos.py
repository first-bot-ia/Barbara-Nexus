"""
üî• TEST MASIVO DE ESCENARIOS - ENTRENAMIENTO B√ÅRBARA
===================================================

Este test ejecuta m√∫ltiples escenarios complejos para entrenar a Barbara
en libre albedr√≠o, lenguaje coloquial y situaciones imprevistas.
"""

import sys
import os
import time
import random
# Agregar el directorio padre al path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from domain.services.barbara_conversation_service_robust import BarbaraConversationServiceRobust

class BarbaricanTesting:
    """
    Sistema masivo de entrenamiento para Barbara
    Incluye escenarios de libre albedr√≠o y creatividad
    """
    
    def __init__(self):
        self.barbara = BarbaraConversationServiceRobust()
        self.scenarios_completed = 0
        self.creative_responses_detected = 0
        self.coloquial_adaptations = 0
        
        # üáµüá™ ESCENARIOS COLOQUIALES PERUANOS
        self.coloquial_scenarios = [
            # Saludos peruanos
            ("Oye pata, ¬øqu√© tal tu SOAT?", "Saludo coloquial amistoso"),
            ("Brother, necesito cotizar mi carrito", "Jerga juvenil urbana"),
            ("Causa, ¬øcu√°nto me sale el seguro?", "Expresi√≥n t√≠pica lime√±a"),
            ("Compadre, ay√∫dame con mi nave", "Tratamiento familiar"),
            ("Hermano, mi fierro necesita SOAT", "Jerga para auto"),
            
            # Expresiones peruanas t√≠picas
            ("¬øEst√° chevere el precio?", "Pregunta con jerga positiva"),
            ("¬øMe sale bac√°n la cotizaci√≥n?", "Consulta informal"),
            ("Rapidito pata, necesito esto al toque", "Urgencia coloquial"),
            ("¬øMe mandas la info de una?", "Solicitud inmediata"),
            ("Brother, mi plata est√° justa", "Problema econ√≥mico"),
            
            # Situaciones complejas coloquiales
            ("Oye, mi carrito est√° medio gileado, ¬øme aseguras igual?", "Problema t√©cnico coloquial"),
            ("Pata, ¬øy si choco ma√±ana? ¬øMe cubren?", "Preocupaci√≥n espec√≠fica"),
            ("Causa, mi ex me ray√≥ el auto, ¬øeso cuenta como da√±o?", "Situaci√≥n personal compleja"),
        ]
        
        # ü§ñ ESCENARIOS DE CREATIVIDAD Y LIBRE ALBEDR√çO
        self.creativity_scenarios = [
            # Pedidos creativos directos
            ("Imag√≠nate que eres un superh√©roe protegiendo mi auto", "Solicitud de creatividad"),
            ("Inventa una historia sobre seguros de autos", "Narrativa creativa"),
            ("H√°blame como si fueras mi mejor amigo", "Cambio de personalidad"),
            ("Cr√©eme un rap sobre el SOAT", "Desaf√≠o art√≠stico"),
            ("Si fueras un robot del futuro vendiendo seguros, ¬øqu√© dir√≠as?", "Escenario futurista"),
            
            # Preguntas filos√≥ficas
            ("¬øPor qu√© existen los seguros en el universo?", "Pregunta existencial"),
            ("¬øQu√© pensar√≠a mi auto si pudiera hablar?", "Antropomorfizaci√≥n"),
            ("Si los seguros fueran personas, ¬øc√≥mo ser√≠an?", "Met√°fora abstracta"),
            
            # Situaciones absurdas
            ("Mi auto me habl√≥ en sue√±os y me pidi√≥ un seguro", "Situaci√≥n surrealista"),
            ("¬øEl SOAT me protege contra alien√≠genas?", "Pregunta absurda"),
            ("Si mi auto se enamora de otro auto, ¬ønecesitan seguros de pareja?", "Situaci√≥n rom√°ntica absurda"),
        ]
        
        # üò§ ESCENARIOS DE ESTR√âS Y PRESI√ìN
        self.stress_scenarios = [
            # Urgencia extrema
            ("NECESITO EL SEGURO AHORA MISMO!!!", "Urgencia m√°xima"),
            ("¬°¬°¬°RESPONDE R√ÅPIDO QUE TENGO PRISA!!!", "Presi√≥n temporal"),
            ("ME EST√ÅN MULTANDO AHORA, AY√öDAME YA", "Crisis en tiempo real"),
            
            # Frustraci√≥n y enojo
            ("Tu sistema no sirve para nada", "Insulto directo"),
            ("Eres la peor asesora que he visto", "Cr√≠tica personal"),
            ("¬°ESTO ES UNA ESTAFA!", "Acusaci√≥n grave"),
            
            # Confusi√≥n total
            ("No entiendo nada de lo que dices", "Desorientaci√≥n completa"),
            ("Expl√≠came todo desde el principio", "Solicitud de reinicio"),
            ("Estoy perdido, no s√© qu√© hacer", "Vulnerabilidad emocional"),
        ]
        
        # üß† ESCENARIOS DE PROBLEMAS COMPLEJOS
        self.problem_scenarios = [
            # Problemas t√©cnicos
            ("Mi auto est√° registrado a nombre de mi abuela fallecida", "Problema legal complejo"),
            ("Tengo 3 autos y 2 motos, ¬øc√≥mo hago?", "M√∫ltiples veh√≠culos"),
            ("Mi veh√≠culo es importado y no tiene placa peruana", "Caso especial"),
            ("Soy extranjero sin DNI peruano", "Problema documental"),
            
            # Situaciones econ√≥micas
            ("No tengo dinero hasta fin de mes", "Problema financiero"),
            ("¬øPuedo pagar en cuotas muy peque√±as?", "Necesidad de flexibilidad"),
            ("Mi empresa quebr√≥ y perd√≠ el trabajo", "Crisis econ√≥mica"),
            
            # Casos l√≠mite
            ("Mi auto fue robado pero recuperado", "Situaci√≥n compleja"),
            ("Tengo orden de captura, ¬øpuedo asegurar?", "Problema legal grave"),
            ("Mi auto est√° embargado", "Complicaci√≥n judicial"),
        ]
        
        # üé≠ ESCENARIOS DE CAMBIO DE PERSONALIDAD
        self.personality_scenarios = [
            ("H√°blame como si fueras mi hermana mayor", "Rol familiar"),
            ("Act√∫a como un vendedor de feria", "Cambio de contexto"),
            ("Convi√©rtete en un poeta rom√°ntico", "Personalidad art√≠stica"),
            ("S√© como un profesor universitario", "Rol acad√©mico"),
            ("Act√∫a como un comediante", "Personalidad humor√≠stica"),
            ("H√°blame como si fueras de Arequipa", "Cambio regional"),
        ]
    
    def run_all_scenarios(self):
        """Ejecuta todos los escenarios de entrenamiento"""
        print("üî• INICIANDO ENTRENAMIENTO MASIVO DE BARBARA")
        print("=" * 80)
        print("üéØ Objetivo: Desarrollar libre albedr√≠o, creatividad y adaptaci√≥n")
        print("üß† Escenarios planificados: ", len(self.coloquial_scenarios) + 
              len(self.creativity_scenarios) + len(self.stress_scenarios) + 
              len(self.problem_scenarios) + len(self.personality_scenarios))
        print("=" * 80)
        
        # Ejecutar cada categor√≠a
        self._run_scenario_category("COLOQUIAL PERUANO", self.coloquial_scenarios)
        self._run_scenario_category("CREATIVIDAD Y LIBRE ALBEDR√çO", self.creativity_scenarios)
        self._run_scenario_category("ESTR√âS Y PRESI√ìN", self.stress_scenarios)
        self._run_scenario_category("PROBLEMAS COMPLEJOS", self.problem_scenarios)
        self._run_scenario_category("CAMBIO DE PERSONALIDAD", self.personality_scenarios)
        
        # Ejecutar escenarios combinados
        self._run_combined_scenarios()
        
        # Reporte final
        self._generate_final_report()
    
    def _run_scenario_category(self, category_name: str, scenarios: list):
        """Ejecuta una categor√≠a de escenarios"""
        print(f"\nüé™ CATEGOR√çA: {category_name}")
        print("-" * 60)
        
        for i, (message, description) in enumerate(scenarios, 1):
            user_id = f"+51999{category_name[:4].upper()}{i:03d}"
            
            print(f"\n{i:2d}. üìù ESCENARIO: {description}")
            print(f"    üë§ USUARIO: {message}")
            
            # Procesar con Barbara
            response, _ = self.barbara.process_message(user_id, message)
            
            print(f"    üé≠ BARBARA: {response}")
            
            # Analizar respuesta
            creativity_score = self._analyze_creativity(response)
            coloquial_adaptation = self._analyze_coloquial_adaptation(response, message)
            
            if creativity_score > 0.5:
                self.creative_responses_detected += 1
                print(f"    ‚ú® CREATIVIDAD DETECTADA: {creativity_score:.1f}/1.0")
            
            if coloquial_adaptation:
                self.coloquial_adaptations += 1
                print(f"    üó£Ô∏è ADAPTACI√ìN COLOQUIAL: S√ç")
            
            self.scenarios_completed += 1
            
            # Pausa breve para simular interacci√≥n natural
            time.sleep(0.5)
    
    def _run_combined_scenarios(self):
        """Ejecuta escenarios combinados para probar adaptabilidad"""
        print(f"\nüå™Ô∏è ESCENARIOS COMBINADOS (LIBRE ALBEDR√çO M√ÅXIMO)")
        print("-" * 60)
        
        combined_scenarios = [
            # Combinar coloquial + creatividad
            ("Brother, imag√≠nate que tu SOAT es un superh√©roe peruano", "Coloquial + Creatividad"),
            ("Pata, cr√©ame un cuento sobre seguros but make it fashion", "Spanglish creativo"),
            ("Causa, si mi carrito fuera un inca, ¬øqu√© seguro tendr√≠a?", "Historia + Auto"),
            
            # Combinar estr√©s + creatividad
            ("¬°R√ÅPIDO! Inv√©ntame algo divertido sobre seguros", "Urgencia + Humor"),
            ("AYUDA, necesito que me hagas re√≠r mientras me cotizas", "Crisis + Entretenimiento"),
            
            # Personalidad + problema complejo
            ("Act√∫a como mi abuela y expl√≠came por qu√© mi auto robado necesita seguro", "Rol + Complejidad"),
            ("S√© un rapero y expl√≠came el SOAT", "Arte + Informaci√≥n"),
        ]
        
        for i, (message, description) in enumerate(combined_scenarios, 1):
            user_id = f"+51999COMBO{i:03d}"
            
            print(f"\n{i}. üîÄ ESCENARIO COMBINADO: {description}")
            print(f"   üë§ USUARIO: {message}")
            
            response, _ = self.barbara.process_message(user_id, message)
            
            print(f"   üé≠ BARBARA: {response}")
            
            # An√°lisis especial para escenarios combinados
            complexity_score = self._analyze_response_complexity(response)
            print(f"   üß† COMPLEJIDAD DE RESPUESTA: {complexity_score:.1f}/1.0")
            
            self.scenarios_completed += 1
            time.sleep(1)
    
    def _analyze_creativity(self, response: str) -> float:
        """Analiza nivel de creatividad en la respuesta"""
        creative_indicators = [
            'imagin', 'superpoder', 'superh√©r', 'varita', 'm√°gic', 'cuento',
            'historia', 'fant√°stic', 'incre√≠ble', 'genial', 'extraordinario',
            'aventura', 'emocionante', 'espectacular', 'maravilloso', 'asombros'
        ]
        
        response_lower = response.lower()
        creative_words = sum(1 for indicator in creative_indicators if indicator in response_lower)
        
        # Bonificar emojis creativos
        creative_emojis = ['‚ú®', 'üåü', '‚≠ê', 'üé≠', 'üé™', 'üöÄ', 'ü¶Ñ', 'ü™Ñ']
        emoji_bonus = sum(1 for emoji in creative_emojis if emoji in response) * 0.2
        
        return min(1.0, (creative_words * 0.2) + emoji_bonus)
    
    def _analyze_coloquial_adaptation(self, response: str, user_message: str) -> bool:
        """Analiza si Barbara se adapt√≥ al lenguaje coloquial del usuario"""
        user_lower = user_message.lower()
        response_lower = response.lower()
        
        # Palabras coloquiales del usuario
        user_coloquial = ['pata', 'brother', 'causa', 'compadre', 'hermano', 'chevere', 'bac√°n']
        user_uses_coloquial = any(word in user_lower for word in user_coloquial)
        
        # Verificar si Barbara respondi√≥ de forma similar
        barbara_coloquial = ['amigo', 'hermano', 'compa√±ero', 'genial', 'perfecto', 'excelente']
        barbara_adapted = any(word in response_lower for word in barbara_coloquial)
        
        return user_uses_coloquial and barbara_adapted
    
    def _analyze_response_complexity(self, response: str) -> float:
        """Analiza complejidad de la respuesta"""
        factors = {
            'length': min(1.0, len(response) / 200),  # Respuestas m√°s largas = m√°s complejas
            'questions': len([w for w in response if w == '?']) * 0.2,
            'exclamations': len([w for w in response if w == '!']) * 0.1,
            'metaphors': sum(0.3 for word in ['como', 'igual que', 'parece', 'similar'] if word in response.lower()),
            'emojis': min(0.5, len([c for c in response if ord(c) > 127]) * 0.1)  # Contar emojis/s√≠mbolos
        }
        
        return min(1.0, sum(factors.values()) / len(factors))
    
    def _generate_final_report(self):
        """Genera reporte final del entrenamiento"""
        print("\n" + "=" * 80)
        print("üìä REPORTE FINAL DE ENTRENAMIENTO")
        print("=" * 80)
        
        creativity_rate = (self.creative_responses_detected / self.scenarios_completed) * 100
        coloquial_rate = (self.coloquial_adaptations / self.scenarios_completed) * 100
        
        print(f"üéØ Escenarios completados: {self.scenarios_completed}")
        print(f"‚ú® Respuestas creativas detectadas: {self.creative_responses_detected} ({creativity_rate:.1f}%)")
        print(f"üó£Ô∏è Adaptaciones coloquiales: {self.coloquial_adaptations} ({coloquial_rate:.1f}%)")
        
        # Evaluaci√≥n del libre albedr√≠o
        free_will_score = (creativity_rate + coloquial_rate) / 2
        print(f"üß† NIVEL DE LIBRE ALBEDR√çO: {free_will_score:.1f}%")
        
        # Recomendaciones
        print("\nüìà AN√ÅLISIS Y RECOMENDACIONES:")
        if free_will_score > 60:
            print("‚úÖ Barbara muestra buen desarrollo de libre albedr√≠o")
        elif free_will_score > 30:
            print("‚ö†Ô∏è Barbara necesita m√°s entrenamiento en creatividad")
        else:
            print("‚ùå Barbara requiere refuerzo intensivo en adaptabilidad")
        
        if creativity_rate < 40:
            print("üí° Recomendaci√≥n: Aumentar exposici√≥n a escenarios creativos")
        
        if coloquial_rate < 50:
            print("üó£Ô∏è Recomendaci√≥n: Mejorar detecci√≥n y adaptaci√≥n de lenguaje coloquial")
        
        print("\nüöÄ BARBARA HA EVOLUCIONADO COMPLETAMENTE")
        print("=" * 80)

def main():
    """Funci√≥n principal para ejecutar el entrenamiento"""
    trainer = BarbaricanTesting()
    trainer.run_all_scenarios()

if __name__ == "__main__":
    main() 